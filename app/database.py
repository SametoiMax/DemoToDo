import sqlite3
import os
import random
from datetime import datetime, timedelta

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_NAME = os.path.join(BASE_DIR, "database.db")

def get_db_connection():
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def create_db():
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        content TEXT NOT NULL,
        parent_id INTEGER,
        current INTEGER DEFAULT 0,
        comment TEXT DEFAULT '',
        completed_at DATETIME DEFAULT NULL,
        started_at DATETIME DEFAULT NULL,
        priority INTEGER DEFAULT 1,
        FOREIGN KEY (parent_id) REFERENCES tasks (id)
    );""")

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS calendar_tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        task_id INTEGER NOT NULL,
        start_date TEXT NOT NULL,
        end_date TEXT NOT NULL,
        notes TEXT,
        all_day INTEGER DEFAULT 0,
        FOREIGN KEY (task_id) REFERENCES tasks (id)
    );""")

    conn.commit()
    conn.close()

def seed_data():
    conn = get_db_connection()
    cursor = conn.cursor()

    main_tasks = ['–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', '–î–∏–∑–∞–π–Ω –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (Coding)', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ']
    subtasks = {
        '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (Coding)': ['Frontend', 'Backend', 'API-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'],
        'Backend': ['–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞', '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'],
        '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö': ['–í—ã–±–æ—Ä –°–£–ë–î', '–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã', '–ú–∏–≥—Ä–∞—Ü–∏–∏', '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤', '–•—Ä–∞–Ω–∏–º—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã']
    }

    task_ids = {}

    cursor.execute("INSERT INTO tasks (parent_id, content, current) VALUES (?, ?, 1)", (None, '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û'))
    task_ids['–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û'] = cursor.lastrowid

    for mt in main_tasks:
        cursor.execute("INSERT INTO tasks (parent_id, content, current) VALUES (?, ?, ?)",
                       (task_ids['–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û'], mt, 1))
        task_ids[mt] = cursor.lastrowid

    for parent, children in subtasks.items():
        for child in children:
            parent_id = task_ids.get(parent, task_ids['–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (Coding)'])
            completed_at = datetime.now() if random.random() < 0.8 else None
            cursor.execute("INSERT INTO tasks (parent_id, content, completed_at) VALUES (?, ?, ?)",
                           (parent_id, child, completed_at))
            task_ids[child] = cursor.lastrowid

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–æ 100
    for i in range(len(task_ids) + 1, 101):
        parent_id = random.choice(list(task_ids.values()))
        completed_at = datetime.now() if random.random() < 0.8 else None
        task_name = f"–î–æ–ø. –∑–∞–¥–∞—á–∞ {i}"
        cursor.execute("INSERT INTO tasks (parent_id, content, completed_at) VALUES (?, ?, ?)",
                       (parent_id, task_name, completed_at))
        task_ids[task_name] = cursor.lastrowid

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏
    today = datetime.now().replace(hour=9, minute=0, second=0, microsecond=0)
    end_date = today + timedelta(days=14)

    working_hours_per_day = [(9, 12), (13, 17)]
    current_day = today
    task_list = list(task_ids.values())

    while current_day < end_date:
        if current_day.weekday() < 5:  # –ü–Ω-–ü—Ç
            for start_hour, end_hour in working_hours_per_day:
                task_id = random.choice(task_list)
                start_time = current_day.replace(hour=start_hour)
                end_time = current_day.replace(hour=end_hour)
                cursor.execute("""
                    INSERT INTO calendar_tasks (task_id, start_date, end_date, notes, all_day) 
                    VALUES (?, ?, ?, ?, ?)
                """, (task_id, start_time.isoformat(), end_time.isoformat(), '–ê–≤—Ç–æ—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ', 0))
        current_day += timedelta(days=1)

    conn.commit()
    conn.close()

def init_db():
    if not os.path.exists(DB_NAME):
        print("üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        create_db()
        seed_data()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞–º–∏!")

def update_database():

    pass

def backup_database():

    pass

if __name__ == "__main__":
    init_db()
